{
  "version": 3,
  "sources": ["../../../app/routes/entries.$entryId.edit.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\entries.$entryId.edit.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\entries.$entryId.edit.jsx\");\n  import.meta.hot.lastModified = \"1709148828559.9995\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport mongoose from \"mongoose\";\nimport EntryForm from \"~/components/entry-form\";\nimport { getSession } from \"~/session.server\";\nexport async function loader({\n  params,\n  request\n}) {\n  if (typeof params.entryId !== \"string\") {\n    throw new Response(\"Not found\", {\n      status: 404,\n      statusText: \"Not found\"\n    });\n  }\n  let entry = await mongoose.models.Entry.findById(params.entryId).lean().exec();\n  if (!entry) {\n    throw new Response(\"Not found\", {\n      status: 404,\n      statusText: \"Not found\"\n    });\n  }\n  const session = await getSession(request.headers.get(\"cookie\"));\n  if (!session.data.isAdmin) {\n    throw new Response(\"Not authenticated\", {\n      status: 401,\n      statusText: \"Not authenticated\"\n    });\n  }\n  return {\n    ...entry,\n    date: entry.date.toISOString().substring(0, 10)\n  };\n}\nexport default function EditPage() {\n  _s();\n  let entry = useLoaderData();\n  function handleSubmit(event) {\n    if (!confirm(\"Are you sure?\")) {\n      event.preventDefault();\n    }\n  }\n  return <div className=\"mt-4\">\r\n      <div className=\"mb-8 rounded-lg border border-gray-700/30 bg-gray-800/50 p-4 lg:mb-20 lg:p-6\">\r\n        <p className=\"text-sm font-medium text-gray-500 lg:text-base\">\r\n          Edit entry\r\n        </p>\r\n        <EntryForm entry={entry} />\r\n      </div>\r\n      <div className=\"mt-8\">\r\n        <Form method=\"post\" onSubmit={handleSubmit}>\r\n          <button name=\"_action\" value=\"delete\" className=\"text-sm text-gray-600 underline\">\r\n            Delete this entry...\r\n          </button>\r\n        </Form>\r\n      </div>\r\n    </div>;\n}\n_s(EditPage, \"o1sExt1TnOEiEFz6bIVAHi/LOVo=\", false, function () {\n  return [useLoaderData];\n});\n_c = EditPage;\nexport async function action({\n  request,\n  params\n}) {\n  const session = await getSession(request.headers.get(\"cookie\"));\n  if (!session.data.isAdmin) {\n    throw new Response(\"Not authenticated\", {\n      status: 401,\n      statusText: \"Not authenticated\"\n    });\n  }\n  if (typeof params.entryId !== \"string\") {\n    throw new Response(\"Not found\", {\n      status: 404,\n      statusText: \"Not found\"\n    });\n  }\n  let formData = await request.formData();\n  // Artificial delay to simulate slow network\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  if (formData.get(\"_action\") === \"delete\") {\n    await mongoose.models.Entry.findByIdAndDelete(params.entryId);\n    return redirect(\"/\");\n  } else {\n    const entry = await mongoose.models.Entry.findById(params.entryId);\n    entry.date = new Date(formData.get(\"date\"));\n    entry.type = formData.get(\"type\");\n    entry.text = formData.get(\"text\");\n    await entry.save();\n    return redirect(\"/\");\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EditPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;AAEzB,sBAAqB;AAErB,qBAA2B;AAwCnB;AAhER,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iDAAmD,EAAE;AAAA,EAC9F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwC;AACxC,cAAY,IAAI,eAAe;AACjC;AAqCe,SAAR,WAA4B;AACjC,KAAG;AACH,MAAI,QAAQ,cAAc;AAC1B,WAAS,aAAa,OAAO;AAC3B,QAAI,CAAC,QAAQ,eAAe,GAAG;AAC7B,YAAM,eAAe;AAAA,IACvB;AAAA,EACF;AACA,SAAO,mDAAC,SAAI,WAAU,QAClB;AAAA,uDAAC,SAAI,WAAU,gFACb;AAAA,yDAAC,OAAE,WAAU,kDAAiD,0BAA9D;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,aAAU,SAAX;AAAA;AAAA;AAAA;AAAA,aAAyB;AAAA,SAJ3B;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,SAAI,WAAU,QACb,6DAAC,QAAK,QAAO,QAAO,UAAU,cAC5B,6DAAC,YAAO,MAAK,WAAU,OAAM,UAAS,WAAU,mCAAkC,oCAAlF;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,OAbG;AAAA;AAAA;AAAA;AAAA,SAcL;AACJ;AACA,GAAG,UAAU,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AAiCL,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
